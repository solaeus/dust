//! Token, TokenOwned and TokenKind types.
use std::fmt::{self, Display, Formatter};

use serde::{Deserialize, Serialize};

macro_rules! define_tokens {
    ($($variant:ident $(($data_type:ty))?),+) => {
        /// Source token.
        ///
        /// This is a borrowed type, i.e. some variants contain references to the source text.
        #[derive(Debug, Clone, Copy, Eq, PartialEq, PartialOrd, Ord, Serialize, Deserialize)]
        pub enum Token<'src> {
            $(
                $variant $(($data_type))?,
            )*
        }

        #[derive(Debug, Clone, Copy, Eq, PartialEq, PartialOrd, Ord, Serialize, Deserialize)]
        /// Source-free representation of a token.
        ///
        /// If a [Token] borrows from the source text, its TokenKind omits that data.
        pub enum TokenKind {
            $(
                $variant,
            )*
        }
    };
}

define_tokens! {
    Eof,

    // Hard-coded values
    Boolean(&'src str),
    Byte(&'src str),
    Character(char),
    Float(&'src str),
    Identifier(&'src str),
    Integer(&'src str),
    String(&'src str),

    // Keywords
    Any,
    Async,
    Bool,
    Break,
    ByteKeyword,
    Cell,
    Const,
    Else,
    FloatKeyword,
    Fn,
    If,
    Int,
    Let,
    List,
    Loop,
    Map,
    Mod,
    Mut,
    Return,
    Str,
    Struct,
    Use,
    While,

    // Symbols
    ArrowThin,
    BangEqual,
    Bang,
    Colon,
    Comma,
    Dot,
    DoubleAmpersand,
    DoubleDot,
    DoubleEqual,
    DoublePipe,
    Equal,
    Greater,
    GreaterEqual,
    LeftBrace,
    LeftBracket,
    LeftParenthesis,
    Less,
    LessEqual,
    Minus,
    MinusEqual,
    Percent,
    PercentEqual,
    Plus,
    PlusEqual,
    RightBrace,
    RightBracket,
    RightParenthesis,
    Semicolon,
    Slash,
    SlashEqual,
    Star,
    StarEqual
}

impl Token<'_> {
    pub fn as_str(&self) -> &str {
        match self {
            Token::Eof => "EOF",
            Token::Boolean(text) => text,
            Token::Byte(text) => text,
            Token::ByteKeyword => "byte",
            Token::Character(_) => "character token",
            Token::Float(text) => text,
            Token::Identifier(text) => text,
            Token::Integer(text) => text,
            Token::String(text) => text,
            Token::Any => "any",
            Token::Async => "async",
            Token::ArrowThin => "->",
            Token::Bool => "bool",
            Token::Break => "break",
            Token::Cell => "cell",
            Token::Const => "const",
            Token::Else => "else",
            Token::FloatKeyword => "float",
            Token::Fn => "fn",
            Token::If => "if",
            Token::Int => "int",
            Token::Let => "let",
            Token::List => "list",
            Token::Loop => "loop",
            Token::Map => "map",
            Token::Mod => "mod",
            Token::Mut => "mut",
            Token::Str => "str",
            Token::Struct => "struct",
            Token::Use => "use",
            Token::While => "while",
            Token::BangEqual => "!=",
            Token::Bang => "!",
            Token::Colon => ":",
            Token::Comma => ",",
            Token::Dot => ".",
            Token::DoubleAmpersand => "&&",
            Token::DoubleDot => "..",
            Token::DoubleEqual => "==",
            Token::DoublePipe => "||",
            Token::Equal => "=",
            Token::Greater => ">",
            Token::GreaterEqual => ">=",
            Token::LeftBrace => "{",
            Token::LeftParenthesis => "(",
            Token::LeftBracket => "[",
            Token::Less => "<",
            Token::LessEqual => "<=",
            Token::Minus => "-",
            Token::MinusEqual => "-=",
            Token::Percent => "%",
            Token::PercentEqual => "%=",
            Token::Plus => "+",
            Token::PlusEqual => "+=",
            Token::Return => "return",
            Token::RightBrace => "}",
            Token::RightParenthesis => ")",
            Token::RightBracket => "]",
            Token::Semicolon => ";",
            Token::Slash => "/",
            Token::SlashEqual => "/=",
            Token::Star => "*",
            Token::StarEqual => "*=",
        }
    }

    pub fn to_owned(&self) -> TokenOwned {
        match self {
            Token::Any => TokenOwned::Any,
            Token::ArrowThin => TokenOwned::ArrowThin,
            Token::Async => TokenOwned::Async,
            Token::BangEqual => TokenOwned::BangEqual,
            Token::Bang => TokenOwned::Bang,
            Token::Bool => TokenOwned::Bool,
            Token::Boolean(boolean) => TokenOwned::Boolean(boolean.to_string()),
            Token::Break => TokenOwned::Break,
            Token::Byte(byte) => TokenOwned::Byte(byte.to_string()),
            Token::ByteKeyword => TokenOwned::ByteKeyword,
            Token::Character(character) => TokenOwned::Character(*character),
            Token::Colon => TokenOwned::Colon,
            Token::Comma => TokenOwned::Comma,
            Token::Cell => TokenOwned::Cell,
            Token::Const => TokenOwned::Const,
            Token::Dot => TokenOwned::Dot,
            Token::DoubleAmpersand => TokenOwned::DoubleAmpersand,
            Token::DoubleDot => TokenOwned::DoubleDot,
            Token::DoubleEqual => TokenOwned::DoubleEqual,
            Token::DoublePipe => TokenOwned::DoublePipe,
            Token::Else => TokenOwned::Else,
            Token::Eof => TokenOwned::Eof,
            Token::Equal => TokenOwned::Equal,
            Token::Float(float) => TokenOwned::Float(float.to_string()),
            Token::FloatKeyword => TokenOwned::FloatKeyword,
            Token::Fn => TokenOwned::Fn,
            Token::Greater => TokenOwned::Greater,
            Token::GreaterEqual => TokenOwned::GreaterEqual,
            Token::Identifier(text) => TokenOwned::Identifier(text.to_string()),
            Token::If => TokenOwned::If,
            Token::Int => TokenOwned::Int,
            Token::Integer(integer) => TokenOwned::Integer(integer.to_string()),
            Token::LeftBrace => TokenOwned::LeftBrace,
            Token::LeftParenthesis => TokenOwned::LeftParenthesis,
            Token::LeftBracket => TokenOwned::LeftBracket,
            Token::Let => TokenOwned::Let,
            Token::Less => TokenOwned::Less,
            Token::LessEqual => TokenOwned::LessEqual,
            Self::List => TokenOwned::List,
            Token::Loop => TokenOwned::Loop,
            Token::Map => TokenOwned::Map,
            Token::Minus => TokenOwned::Minus,
            Token::MinusEqual => TokenOwned::MinusEqual,
            Token::Mod => TokenOwned::Mod,
            Token::Mut => TokenOwned::Mut,
            Token::Percent => TokenOwned::Percent,
            Token::PercentEqual => TokenOwned::PercentEqual,
            Token::Plus => TokenOwned::Plus,
            Token::PlusEqual => TokenOwned::PlusEqual,
            Token::Return => TokenOwned::Return,
            Token::RightBrace => TokenOwned::RightBrace,
            Token::RightParenthesis => TokenOwned::RightParenthesis,
            Token::RightBracket => TokenOwned::RightBracket,
            Token::Semicolon => TokenOwned::Semicolon,
            Token::Star => TokenOwned::Star,
            Token::StarEqual => TokenOwned::StarEqual,
            Token::Slash => TokenOwned::Slash,
            Token::SlashEqual => TokenOwned::SlashEqual,
            Token::String(text) => TokenOwned::String(text.to_string()),
            Token::Str => TokenOwned::Str,
            Token::Struct => TokenOwned::Struct,
            Token::Use => TokenOwned::Use,
            Token::While => TokenOwned::While,
        }
    }

    pub fn kind(&self) -> TokenKind {
        match self {
            Token::Any => TokenKind::Any,
            Token::ArrowThin => TokenKind::ArrowThin,
            Token::Async => TokenKind::Async,
            Token::BangEqual => TokenKind::BangEqual,
            Token::Bang => TokenKind::Bang,
            Token::Bool => TokenKind::Bool,
            Token::Boolean(_) => TokenKind::Boolean,
            Token::Break => TokenKind::Break,
            Token::Byte(_) => TokenKind::Byte,
            Token::ByteKeyword => TokenKind::Byte,
            Token::Cell => TokenKind::Cell,
            Token::Character(_) => TokenKind::Character,
            Token::Colon => TokenKind::Colon,
            Token::Comma => TokenKind::Comma,
            Token::Const => TokenKind::Const,
            Token::Dot => TokenKind::Dot,
            Token::DoubleAmpersand => TokenKind::DoubleAmpersand,
            Token::DoubleDot => TokenKind::DoubleDot,
            Token::DoubleEqual => TokenKind::DoubleEqual,
            Token::DoublePipe => TokenKind::DoublePipe,
            Token::Else => TokenKind::Else,
            Token::Eof => TokenKind::Eof,
            Token::Equal => TokenKind::Equal,
            Token::Float(_) => TokenKind::Float,
            Token::FloatKeyword => TokenKind::FloatKeyword,
            Token::Fn => TokenKind::Fn,
            Token::Greater => TokenKind::Greater,
            Token::GreaterEqual => TokenKind::GreaterEqual,
            Token::Identifier(_) => TokenKind::Identifier,
            Token::If => TokenKind::If,
            Token::Int => TokenKind::Int,
            Token::Integer(_) => TokenKind::Integer,
            Token::LeftBrace => TokenKind::LeftBrace,
            Token::LeftParenthesis => TokenKind::LeftParenthesis,
            Token::LeftBracket => TokenKind::LeftBracket,
            Token::Let => TokenKind::Let,
            Token::Less => TokenKind::Less,
            Token::LessEqual => TokenKind::LessEqual,
            Token::List => TokenKind::List,
            Token::Loop => TokenKind::Loop,
            Token::Map => TokenKind::Map,
            Token::Minus => TokenKind::Minus,
            Token::MinusEqual => TokenKind::MinusEqual,
            Token::Mod => TokenKind::Mod,
            Token::Mut => TokenKind::Mut,
            Token::Percent => TokenKind::Percent,
            Token::PercentEqual => TokenKind::PercentEqual,
            Token::Plus => TokenKind::Plus,
            Token::PlusEqual => TokenKind::PlusEqual,
            Token::Return => TokenKind::Return,
            Token::RightBrace => TokenKind::RightBrace,
            Token::RightParenthesis => TokenKind::RightParenthesis,
            Token::RightBracket => TokenKind::RightBracket,
            Token::Semicolon => TokenKind::Semicolon,
            Token::Star => TokenKind::Star,
            Token::StarEqual => TokenKind::StarEqual,
            Token::Slash => TokenKind::Slash,
            Token::SlashEqual => TokenKind::SlashEqual,
            Token::Str => TokenKind::Str,
            Token::String(_) => TokenKind::String,
            Token::Struct => TokenKind::Struct,
            Token::Use => TokenKind::Use,
            Token::While => TokenKind::While,
        }
    }
}

impl Display for Token<'_> {
    fn fmt(&self, f: &mut Formatter) -> fmt::Result {
        match self {
            Token::Boolean(value) => write!(f, "{value}"),
            Token::Byte(value) => write!(f, "{value}"),
            Token::Character(value) => write!(f, "{value}"),
            Token::Float(value) => write!(f, "{value}"),
            Token::Identifier(value) => write!(f, "{value}"),
            Token::Integer(value) => write!(f, "{value}"),
            Token::String(value) => write!(f, "{value}"),
            _ => write!(f, "{}", self.as_str()),
        }
    }
}

impl Display for TokenKind {
    fn fmt(&self, f: &mut Formatter) -> fmt::Result {
        match self {
            TokenKind::Boolean => write!(f, "boolean"),
            TokenKind::Byte => write!(f, "byte"),
            TokenKind::Character => write!(f, "character"),
            TokenKind::Float => write!(f, "float"),
            TokenKind::Identifier => write!(f, "identifier"),
            TokenKind::Integer => write!(f, "integer"),
            TokenKind::String => write!(f, "string"),

            TokenKind::Any => Token::Any.fmt(f),
            TokenKind::ArrowThin => Token::ArrowThin.fmt(f),
            TokenKind::Async => Token::Async.fmt(f),
            TokenKind::BangEqual => Token::BangEqual.fmt(f),
            TokenKind::Bang => Token::Bang.fmt(f),
            TokenKind::Bool => Token::Bool.fmt(f),
            TokenKind::Break => Token::Break.fmt(f),
            TokenKind::ByteKeyword => Token::ByteKeyword.fmt(f),
            TokenKind::Cell => Token::Cell.fmt(f),
            TokenKind::Colon => Token::Colon.fmt(f),
            TokenKind::Comma => Token::Comma.fmt(f),
            TokenKind::Const => Token::Const.fmt(f),
            TokenKind::Dot => Token::Dot.fmt(f),
            TokenKind::DoubleAmpersand => Token::DoubleAmpersand.fmt(f),
            TokenKind::DoubleDot => Token::DoubleDot.fmt(f),
            TokenKind::DoubleEqual => Token::DoubleEqual.fmt(f),
            TokenKind::DoublePipe => Token::DoublePipe.fmt(f),
            TokenKind::Else => Token::Else.fmt(f),
            TokenKind::Eof => Token::Eof.fmt(f),
            TokenKind::Equal => Token::Equal.fmt(f),
            TokenKind::FloatKeyword => Token::FloatKeyword.fmt(f),
            TokenKind::Fn => Token::Fn.fmt(f),
            TokenKind::Greater => Token::Greater.fmt(f),
            TokenKind::GreaterEqual => Token::GreaterEqual.fmt(f),
            TokenKind::If => Token::If.fmt(f),
            TokenKind::Int => Token::Int.fmt(f),
            TokenKind::LeftBrace => Token::LeftBrace.fmt(f),
            TokenKind::LeftParenthesis => Token::LeftParenthesis.fmt(f),
            TokenKind::LeftBracket => Token::LeftBracket.fmt(f),
            TokenKind::Let => Token::Let.fmt(f),
            TokenKind::Less => Token::Less.fmt(f),
            TokenKind::LessEqual => Token::LessEqual.fmt(f),
            TokenKind::List => Token::List.fmt(f),
            TokenKind::Loop => Token::Loop.fmt(f),
            TokenKind::Map => Token::Map.fmt(f),
            TokenKind::Minus => Token::Minus.fmt(f),
            TokenKind::MinusEqual => Token::MinusEqual.fmt(f),
            TokenKind::Mod => Token::Mod.fmt(f),
            TokenKind::Mut => Token::Mut.fmt(f),
            TokenKind::Percent => Token::Percent.fmt(f),
            TokenKind::PercentEqual => Token::PercentEqual.fmt(f),
            TokenKind::Plus => Token::Plus.fmt(f),
            TokenKind::PlusEqual => Token::PlusEqual.fmt(f),
            TokenKind::Return => Token::Return.fmt(f),
            TokenKind::RightBrace => Token::RightBrace.fmt(f),
            TokenKind::RightParenthesis => Token::RightParenthesis.fmt(f),
            TokenKind::RightBracket => Token::RightBracket.fmt(f),
            TokenKind::Semicolon => Token::Semicolon.fmt(f),
            TokenKind::Slash => Token::Slash.fmt(f),
            TokenKind::SlashEqual => Token::SlashEqual.fmt(f),
            TokenKind::Star => Token::Star.fmt(f),
            TokenKind::StarEqual => Token::StarEqual.fmt(f),
            TokenKind::Str => Token::Str.fmt(f),
            TokenKind::Struct => Token::Struct.fmt(f),
            TokenKind::Use => Token::Use.fmt(f),
            TokenKind::While => Token::While.fmt(f),
        }
    }
}

/// Owned representation of a source token.
///
/// If a [Token] borrows from the source text, its TokenOwned omits the data.
#[derive(Debug, Clone, Eq, PartialEq, PartialOrd, Ord, Serialize, Deserialize)]
pub enum TokenOwned {
    Eof,

    Identifier(String),

    // Hard-coded values
    Boolean(String),
    Byte(String),
    Character(char),
    Float(String),
    Integer(String),
    String(String),

    // Keywords
    Any,
    Async,
    Bool,
    Break,
    ByteKeyword,
    Cell,
    Const,
    Else,
    FloatKeyword,
    Fn,
    If,
    Int,
    Let,
    List,
    Loop,
    Map,
    Mod,
    Mut,
    Return,
    Str,
    Use,
    While,

    // Symbols
    ArrowThin,
    Bang,
    BangEqual,
    Colon,
    Comma,
    Dot,
    DoubleAmpersand,
    DoubleDot,
    DoubleEqual,
    DoublePipe,
    Equal,
    Greater,
    GreaterEqual,
    LeftBrace,
    LeftBracket,
    LeftParenthesis,
    Less,
    LessEqual,
    Minus,
    MinusEqual,
    Percent,
    PercentEqual,
    Plus,
    PlusEqual,
    RightBrace,
    RightBracket,
    RightParenthesis,
    Semicolon,
    Star,
    StarEqual,
    Struct,
    Slash,
    SlashEqual,
}

impl Display for TokenOwned {
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
        match self {
            TokenOwned::Boolean(boolean) => Token::Boolean(boolean).fmt(f),
            TokenOwned::Byte(byte) => Token::Byte(byte).fmt(f),
            TokenOwned::Character(character) => Token::Character(*character).fmt(f),
            TokenOwned::Float(float) => Token::Float(float).fmt(f),
            TokenOwned::Identifier(text) => Token::Identifier(text).fmt(f),
            TokenOwned::Integer(integer) => Token::Integer(integer).fmt(f),
            TokenOwned::String(string) => Token::String(string).fmt(f),

            TokenOwned::Any => Token::Any.fmt(f),
            TokenOwned::ArrowThin => Token::ArrowThin.fmt(f),
            TokenOwned::Async => Token::Async.fmt(f),
            TokenOwned::BangEqual => Token::BangEqual.fmt(f),
            TokenOwned::Bang => Token::Bang.fmt(f),
            TokenOwned::Bool => Token::Bool.fmt(f),
            TokenOwned::Break => Token::Break.fmt(f),
            TokenOwned::ByteKeyword => Token::ByteKeyword.fmt(f),
            TokenOwned::Cell => Token::Cell.fmt(f),
            TokenOwned::Colon => Token::Colon.fmt(f),
            TokenOwned::Comma => Token::Comma.fmt(f),
            TokenOwned::Const => Token::Const.fmt(f),
            TokenOwned::Dot => Token::Dot.fmt(f),
            TokenOwned::DoubleAmpersand => Token::DoubleAmpersand.fmt(f),
            TokenOwned::DoubleDot => Token::DoubleDot.fmt(f),
            TokenOwned::DoubleEqual => Token::DoubleEqual.fmt(f),
            TokenOwned::DoublePipe => Token::DoublePipe.fmt(f),
            TokenOwned::Else => Token::Else.fmt(f),
            TokenOwned::Eof => Token::Eof.fmt(f),
            TokenOwned::Equal => Token::Equal.fmt(f),
            TokenOwned::FloatKeyword => Token::FloatKeyword.fmt(f),
            TokenOwned::Fn => Token::Fn.fmt(f),
            TokenOwned::Greater => Token::Greater.fmt(f),
            TokenOwned::GreaterEqual => Token::GreaterEqual.fmt(f),
            TokenOwned::If => Token::If.fmt(f),
            TokenOwned::Int => Token::Int.fmt(f),
            TokenOwned::LeftBrace => Token::LeftBrace.fmt(f),
            TokenOwned::LeftParenthesis => Token::LeftParenthesis.fmt(f),
            TokenOwned::LeftBracket => Token::LeftBracket.fmt(f),
            TokenOwned::Let => Token::Let.fmt(f),
            TokenOwned::Less => Token::Less.fmt(f),
            TokenOwned::LessEqual => Token::LessEqual.fmt(f),
            TokenOwned::List => Token::List.fmt(f),
            TokenOwned::Loop => Token::Loop.fmt(f),
            TokenOwned::Map => Token::Map.fmt(f),
            TokenOwned::Minus => Token::Minus.fmt(f),
            TokenOwned::MinusEqual => Token::MinusEqual.fmt(f),
            TokenOwned::Mod => Token::Mod.fmt(f),
            TokenOwned::Mut => Token::Mut.fmt(f),
            TokenOwned::Percent => Token::Percent.fmt(f),
            TokenOwned::PercentEqual => Token::PercentEqual.fmt(f),
            TokenOwned::Plus => Token::Plus.fmt(f),
            TokenOwned::PlusEqual => Token::PlusEqual.fmt(f),
            TokenOwned::Return => Token::Return.fmt(f),
            TokenOwned::RightBrace => Token::RightBrace.fmt(f),
            TokenOwned::RightParenthesis => Token::RightParenthesis.fmt(f),
            TokenOwned::RightBracket => Token::RightBracket.fmt(f),
            TokenOwned::Semicolon => Token::Semicolon.fmt(f),
            TokenOwned::Slash => Token::Slash.fmt(f),
            TokenOwned::SlashEqual => Token::SlashEqual.fmt(f),
            TokenOwned::Star => Token::Star.fmt(f),
            TokenOwned::StarEqual => Token::StarEqual.fmt(f),
            TokenOwned::Str => Token::Str.fmt(f),
            TokenOwned::Struct => Token::Struct.fmt(f),
            TokenOwned::Use => Token::Use.fmt(f),
            TokenOwned::While => Token::While.fmt(f),
        }
    }
}
